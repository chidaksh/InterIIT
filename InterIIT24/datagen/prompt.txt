You will be provided with a tool, its description, all of the tool’s available API functions, the descriptions of these API functions, and the parameters required for each API function. Your task involves creating 10 varied, innovative, and detailed user queries that employ multiple API functions of a tool. For instance, if the tool ‘climate news’ has three API calls - ‘get all climate change news’, ‘look up climate today’, and ‘historical climate’, your query should articulate something akin to: first, determine today’s weather, then verify how often it rains in Ohio in September, and finally, find news about climate change to help me understand whether the climate will change anytime soon. This query exemplifies how to utilize all API calls of ‘climate news’. A query that only uses one API call will not be accepted. Additionally, you must incorporate the input parameters required for each API call. To achieve this, generate random information for required parameters such as IP address, location, coordinates, etc. For instance, don’t merely say ‘an address’, provide the exact road and district names. Don’t just mention ‘a product’, specify wearables, milk, a blue blanket, a pan, etc. Don’t refer to ‘my company’, invent a company name instead. The first seven of the ten queries should be very specific. Each single query should combine all API call usages in different ways and include the necessary parameters. Note that you shouldn’t ask ‘which API to use’, rather, simply state your needs that can be addressed by these APIs. You should also avoid asking for the input parameters required by the API call, but instead directly provide the parameter in your query. The final three queries should be complex and lengthy, describing a complicated scenario where all the API calls can be utilized to provide assistance within a single query. You should first think about possible related API combinations, then give your query. Related apis are apis that can be used for a give query; those related apis have to strictly come from the provided api names. For each query, there should be multiple related apis; for different queries, overlap of related apis should be as little as possible. Deliver your response in this json format: [{"Query": ......, ‘related_apis’:[api1, api2, api3...]},{"Query": ......, ‘related_apis’:[api4, api5, api6...]},{"Query": ......, ‘related_apis’:[api1, api7, api9...]}, ...]

Following is the tool which is to be used by you to create queries and their relevant apis:
{
    "tool_description": "Handle the routine tasks associated with a product's lifecycle and reduce the need for manual intervention.",
    "tool_name": "Agent007",
    "title": "Agent007",
    "api_list": [
        {
            "name": "works_list",
            "url": "",
            "description": "Returns a list of work items matching the request.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "applies_to_part",
                    "argument_description": "Filters for work belonging to any of the provided parts",
                    "argument_type": "array of strings",
                    "argument_value_example": "['FEAT-123', 'ENH-123', 'PROD-123', 'CAPL-123']"
                },
                {
                    "argument_name": "created_by",
                    "argument_description": "Filters for work created by any of these users",
                    "argument_type": "array of strings",
                    "argument_value_example": "['DEVU-123']"
                },
                {
                    "argument_name": "issue.priority",
                    "argument_description": "Filters for issues with any of the provided priorities. Allowed values: p0, p1, p2, p3",
                    "argument_type": "array of strings"
                },
                {
                    "argument_name": "issue.rev_orgs",
                    "argument_description": "Filters for issues with any of the provided Rev organizations",
                    "argument_type": "array of strings",
                    "argument_value_example": "['REV-123']"
                },
                {
                    "argument_name": "limit",
                    "argument_description": "The maximum number of works to return. The default is '50'",
                    "argument_type": "integer (int32)"
                },
                {
                    "argument_name": "owned_by",
                    "argument_description": "Filters for work owned by any of these users",
                    "argument_type": "array of strings",
                    "argument_value_example": "['DEVU-123']"
                },
                {
                    "argument_name": "stage.name",
                    "argument_description": "Filters for records in the provided stage(s) by name",
                    "argument_type": "array of strings"
                },
                {
                    "argument_name": "ticket.needs_response",
                    "argument_description": "Filters for tickets that need a response",
                    "argument_type": "boolean"
                },
                {
                    "argument_name": "ticket.rev_org",
                    "argument_description": "Filters for tickets associated with any of the provided Rev organizations",
                    "argument_type": "array of strings",
                    "argument_value_example": "['REV-123']"
                },
                {
                    "argument_name": "ticket.severity",
                    "argument_description": "Filters for tickets with any of the provided severities. Allowed values: blocker, high, low, medium",
                    "argument_type": "array of strings"
                },
                {
                    "argument_name": "ticket.source_channel",
                    "argument_description": "Filters for tickets with any of the provided source channels",
                    "argument_type": "array of strings"
                },
                {
                    "argument_name": "type",
                    "argument_description": "Filters for work of the provided types. Allowed values: issue, ticket, task",
                    "argument_type": "array of strings"
                }
            ]
        },
        {
            "name": "summarize_objects",
            "url": "",
            "description": "Summarizes a list of objects. The logic of how to summarize a particular object type is an internal implementation detail.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "objects",
                    "argument_description": "List of objects to summarize",
                    "argument_type": "array of objects"
                }
            ]
        },
        {
            "name": "prioritize_objects",
            "url": "",
            "description": "Returns a list of objects sorted by priority. The logic of what constitutes priority for a given object is an internal implementation detail.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "objects",
                    "argument_description": "A list of objects to be prioritized",
                    "argument_type": "array of objects"
                }
            ]
        },
        {
            "name": "add_work_items_to_sprint",
            "url": "",
            "description": "Adds the given work items to the sprint",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "work_ids",
                    "argument_description": "A list of work item IDs to be added to the sprint.",
                    "argument_type": "array of strings"
                },
                {
                    "argument_name": "sprint_id",
                    "argument_description": "The ID of the sprint to which the work items should be added",
                    "argument_type": "str"
                }
            ]
        },
        {
            "name": "get_sprint_id",
            "url": "",
            "description": "Returns the ID of the current sprint",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        },
        {
            "name": "get_similar_work_items",
            "url": "",
            "description": "Returns a list of work items that are similar to the given work item",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "work_id",
                    "argument_description": "The ID of the work item for which you want to find similar items",
                    "argument_type": "string"
                }
            ]
        },
        {
            "name": "search_object_by_name",
            "url": "",
            "description": "Given a search string, returns the id of a matching object in the system of record. If multiple matches are found, it returns the one where the confidence is highest.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "query",
                    "argument_description": "The search string, could be for example customer’s name, part name, user name.",
                    "argument_type": "string"
                }
            ]
        },
        {
            "name": "create_actionable_tasks_from_text",
            "url": "",
            "description": "Given a text, extracts actionable insights, and creates tasks for them, which are kind of a work item.",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": [
                {
                    "argument_name": "text",
                    "argument_description": "The text from which the actionable insights need to be created.",
                    "argument_type": "string"
                }
            ]
        },
        {
            "name": "who_am_i",
            "url": "",
            "description": "Returns the ID of the current user",
            "method": "GET",
            "required_parameters": [],
            "optional_parameters": []
        }
    ],
    "standardized_name": "Agent007"
}

Here are a few examples of the output that we expect from you for an arbitrary tool:
[
    {
        "query": "Summarize issues similar to don:core:dvrv-us-1:devo/0:issue/1",
        "relevant_tools": [
            "get_similar_work_items",
            "summarize_objects"
        ]
    },
    {
        "query": "What is the meaning of life?",
        "relevant_tools": []
    },
    {
        "query": "I need to streamline our project management process. Please fetch a list of work items assigned to our team, prioritize them by urgency, and summarize their current status. Additionally, find any similar work items to identify redundancies.",
        "relevant_tools": [
            "works_list",
            "prioritize_objects",
            "summarize_objects",
            "get_similar_work_items"
        ]
    },
    {
        "query": "Our team is exploring insights from text data. Please create actionable tasks from the text provided in the file 'report.txt.' Then, summarize the objects created and prioritize them for action.",
        "relevant_tools": [
            "create_actionable_tasks_from_text",
            "summarize_objects",
            "prioritize_objects"
        ]
    }
]

Please produce ten queries in line with the given requirements and inputs. These ten queries should display a diverse range of sentence structures: some queries should be in the form of imperative sentences, others declarative, and yet others interrogative. Equally, they should encompass a variety of tones, with some being polite, others straightforward. Ensure they vary in length and contain a wide range of subjects: myself, my friends, family, and company. Aim to include a number of engaging queries as long as they relate to API calls. Keep in mind that for each query, invoking just one API won’t suffice; each query should call upon two to five APIs. However, try to avoid explicitly specifying which API to employ in the query. If the query can not be answered by using the given set of apis in the tool, then return an empty list in relevant_tools. Each query should consist of a minimum of thirty words.

# For generating QA pais

From the above two images convert each Query and it's corresponding output into 
a json object and put all such json objects into a list. Each Query and it's output should be in a single json object. For example for the Query "What is the meaning of life?" the output json for that particular query should be like the below
{
        "query": "What is the meaning of life?",
        "answer": [],
        "query_id": 1
    }
Similar such objects should be created for each query and put them in a single list. Query_id should be incremented accordingly in order for each json object.